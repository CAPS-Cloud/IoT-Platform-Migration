sudo: false
servies:
  - docker
language: generic
branches:
  only:
  - master
git:
  submodules: false
  depth: 3
notifications:
  email: false
env:
  global:
    - DOCKERHUB_REPOSITORY=iotplatform
    - DOCKERHUB_USER=heldic

before_script:
  - curl -Lo kubectl https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl && chmod +x kubectl && sudo mv kubectl /usr/local/bin/
  - curl -Lo helm-v2.9.1-linux-amd64.tar.gz https://storage.googleapis.com/kubernetes-helm/helm-v2.9.1-linux-amd64.tar.gz && mkdir temp && tar -zxvf helm-v2.9.1-linux-amd64.tar.gz -C temp && chmod +x temp/linux-amd64/helm && sudo mv temp/linux-amd64/helm /usr/local/bin/ && rm -rf temp
  - cp -rp ./infrastructure/.kube $HOME/.kube

script:
  - printenv | grep ".*DOCKERHUB.*"

before_install:
  - git config --global http.sslverify false
  - chmod +x -R travis

install:
  - source travis/check-live-deployment.sh
  - ./travis/check-live-deployment.sh

before_deploy:
  - docker --version
  - export CF_TRACE=false

deploy:
  - provider: script
    skip_cleanup: true
    script: env IMAGE_NAME=iotcore-frontend BUILD_PATH=./iotplatform/iotcore-frontend/ travis/push-docker-images-to-dockerhub.sh
    on:
      #tags: true
      condition: $LIVE = true
  - provider: script
    skip_cleanup: true
    script: env IMAGE_NAME=iotcore-backend BUILD_PATH=./iotplatform/iotcore-backend/ travis/push-docker-images-to-dockerhub.sh
    on:
      #tags: true
      condition: $LIVE = true
  - provider: script
    skip_cleanup: true
    script: env IMAGE_NAME=elasticsearch BUILD_PATH=./iotplatform/elasticsearch/ travis/push-docker-images-to-dockerhub.sh
    on:
      #tags: true
      condition: $LIVE = true
  - provider: script
    skip_cleanup: true
    script: env IMAGE_NAME=mqtt-gateway-nodejs BUILD_PATH=./iotplatform/mqtt-gateway-nodejs/ travis/push-docker-images-to-dockerhub.sh
    on:
      #tags: true
      condition: $LIVE = true
  - provider: script
    skip_cleanup: true
    script: env IMAGE_NAME=http-gateway-nodejs BUILD_PATH=./iotplatform/http-gateway-nodejs/ travis/push-docker-images-to-dockerhub.sh
    on:
      #tags: true
      condition: $LIVE = true
  - provider: script
    skip_cleanup: true
    script: env IMAGE_NAME=http-gateway-go BUILD_PATH=./iotplatform/http-gateway-go/ travis/push-docker-images-to-dockerhub.sh
    on:
      #tags: true
      condition: $LIVE = true
  - provider: script
    skip_cleanup: true
    script: env IMAGE_NAME=ws-gateway-nodejs BUILD_PATH=./iotplatform/ws-gateway-nodejs/ travis/push-docker-images-to-dockerhub.sh
    on:
      #tags: true
      condition: $LIVE = true
  - provider: script
    skip_cleanup: true
    script: env IMAGE_NAME=ws-gateway-go BUILD_PATH=./iotplatform/ws-gateway-go/ travis/push-docker-images-to-dockerhub.sh
    on:
      #tags: true
      condition: $LIVE = true
  - provider: script
    skip_cleanup: true
    script: env IMAGE_NAME=java-producer BUILD_PATH=./iotplatform/java-producer/ travis/push-docker-images-to-dockerhub.sh
    on:
      #tags: true
      condition: $LIVE = true
  - provider: script
    skip_cleanup: true
    script: env IMAGE_NAME=nodejs-producer BUILD_PATH=./iotplatform/nodejs-producer/ travis/push-docker-images-to-dockerhub.sh
    on:
      #tags: true
      condition: $LIVE = true
  - provider: script
    skip_cleanup: true
    script: env IMAGE_NAME=python-producer BUILD_PATH=./iotplatform/python-producer/ travis/push-docker-images-to-dockerhub.sh
    on:
      #tags: true
      condition: $LIVE = true
  - provider: script
    skip_cleanup: true
    script: env IMAGE_NAME=redis BUILD_PATH=./iotplatform/redis/ travis/push-docker-images-to-dockerhub.sh
    on:
      #tags: true
      condition: $LIVE = true

after_script:
  - (helm delete --debug --purge iot || true) && helm upgrade --debug --wait --timeout 300 --install --force --recreate-pods --values ./iotplatform/docker-compose.yml --set-string defaults.imageTag=$TRAVIS_COMMIT iot ./iotplatform/helm-chart/iot
# Better way?
# 1. Upgrade/Install
# 2. If success, break
# 3. If revision=1 in "helm history iot" then "helm delete --purge iot" else "helm rollback iot <previous_revision>"
